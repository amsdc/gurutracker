"""A module that provides a controller class for interacting with SQLite3 databases.

This module defines a Controller class that inherits from Base class defined in
gurutracker.database.base. The Controller class has methods for creating,
updating, deleting and querying assignments and tutors from SQLite3 databases.
It also has methods for validating user inputs and generating reports.

Attributes:
    DATABASE_NAME (str): The name of the database file to use.

Example:
    To use the Controller class, first import it from this module:

        from gurutracker.database.sqlite3 import Controller

    Then create an instance of the Controller class with the database name:

        controller = Controller(DATABASE_NAME)

    You can then call any of the methods defined in the Controller class on
    the controller object, such as:

        controller.list_all_assignments()
        controller.add_assignment(name="Math Homework", uidentifier="MATH-001", type="Homework", tid=1)
        controller.delete_assignment_by_id(2)
        controller.generate_report_by_subject("Math")

Todo:
    * Add more error handling and logging
    * Add more unit tests and documentation
    * Review ChatGPT written docs

Note:
    Documentation for this module generated by Bing ChatGPT, so may not be
    accurate.
"""

import sqlite3

from gurutracker.database.base import Base
from gurutracker.database.objects import Tutor, Assignment, Tag

class Controller(Base):
    def __init__(self, connection):
        self.con = connection
        self._createall()

    def _createall(self):
        self.con.execute("""CREATE TABLE IF NOT EXISTS `tutor` (
	`id` INTEGER PRIMARY KEY AUTOINCREMENT, 
    `name` VARCHAR(100) NOT NULL, 
    `uidentifier` VARCHAR(50) NOT NULL,
    `subject` VARCHAR(50) NOT NULL,
    `level` VARCHAR(50) DEFAULT "school"
);""")

        self.con.execute("""CREATE TABLE IF NOT EXISTS `assignment` (
    `id` INTEGER PRIMARY KEY AUTOINCREMENT,
    `name` VARCHAR(200), 
    `uidentifier` VARCHAR(200) NOT NULL UNIQUE, 
    `type` VARCHAR(20) NOT NULL DEFAULT "summary",
    `tid` INT, -- tutor id
    CONSTRAINT FK_TutorID FOREIGN KEY (`tid`) REFERENCES 
    `tutor`(`id`) ON UPDATE CASCADE ON DELETE CASCADE
);""")

        self.con.execute("""CREATE TABLE IF NOT EXISTS `tag` (
    `id` INTEGER PRIMARY KEY AUTOINCREMENT,
    `text` VARCHAR(50) NOT NULL UNIQUE,
    `fgcolor` CHAR(6),
    `bgcolor` CHAR(6)
);""")

        self.con.execute("""CREATE TABLE IF NOT EXISTS `assignment_tag` (
    `assignment_id` INTEGER,
    `tag_id` INTEGER,
    CONSTRAINT FK_AssignmentTag_Assignment FOREIGN KEY (`assignment_id`)
    REFERENCES `assignment`(`id`),
    CONSTRAINT FK_AssignmentTag_Tag FOREIGN KEY (`tag_id`)
    REFERENCES `tag`(`id`)
);""")
    
    def add_subject(self):
        pass
    
    def edit_subject(self):
        pass
    
    def delete_subject(self):
        pass
    
    def list_all_subjects(self):
        pass
    
    def list_all_assignments(self):
        """List all assignments with their corresponding tutors.

        This function executes a SQL query to select all assignments and their
        related tutor information from the database. It then creates Assignment
        and Tutor objects for each row and appends them to a list.

        Returns:
            A list of Assignment objects with their associated Tutor objects.
        """
        cur = self.con.cursor()
        cur.execute("SELECT `assignment`.`id`, `assignment`.`name`, `assignment`.`uidentifier`, `assignment`.`type`, `assignment`.`tid`, `tutor`.`name`, `tutor`.`uidentifier`, `tutor`.`subject`, `tutor`.`level` FROM `assignment` JOIN `tutor` ON `assignment`.`tid` = `tutor`.`id` ORDER BY `assignment`.`id` ASC;")
        res = []
        for item in cur.fetchall():
            teac = Tutor(id=item[4],
                         name=item[5],
                         uidentifier=item[6],
                         subject=item[7],
                         level=item[8])
            ass = Assignment(id=item[0],
                             name=item[1],
                             uidentifier=item[2],
                             type=item[3],
                             tutor=teac)
            res.append(ass)
        cur.close()
        return res

    def list_all_assignments_customsql(self, custom_sql):
        """List all assignments with their corresponding tutors using a custom SQL query.

        This function executes a SQL query that is composed of a base query and a
        custom SQL string provided by the user. It then creates Assignment and Tutor
        objects for each row and appends them to a list.

        Args:
            custom_sql: A string containing additional SQL clauses to filter or sort
                the assignments.

        Returns:
            A list of Assignment objects with their associated Tutor objects that match
            the custom SQL query.
        
         Raises:
             sqlite3.Error: If there is an error in executing the SQL query.
         """
        cur = self.con.cursor()
        cur.execute("SELECT `assignment`.`id`, `assignment`.`name`, `assignment`.`uidentifier`, `assignment`.`type`, `assignment`.`tid`, `tutor`.`name`, `tutor`.`uidentifier`, `tutor`.`subject`, `tutor`.`level` FROM `assignment` JOIN `tutor` ON `assignment`.`tid` = `tutor`.`id`" + custom_sql + ";")
        res = []
        for item in cur.fetchall():
            teac = Tutor(id=item[4],
                         name=item[5],
                         uidentifier=item[6],
                         subject=item[7],
                         level=item[8])
            ass = Assignment(id=item[0],
                             name=item[1],
                             uidentifier=item[2],
                             type=item[3],
                             tutor=teac)
            res.append(ass)
        cur.close()
        return res
        
    def get_assignment_by_id(self, id):
        """Get an assignment by its id.

        This method executes a SQL query to select an assignment and its
        related tutor information from the database by its id. It then creates
        an Assignment object and a Tutor object for the row and returns them.

        Args:
            id (int): The id of the assignment to get.

        Returns:
            An Assignment object with its associated Tutor object if found,
            or None otherwise.
        """
        cur = self.con.cursor()
        cur.execute("SELECT `assignment`.`id`, `assignment`.`name`, `assignment`.`uidentifier`, `assignment`.`type`, `assignment`.`tid`, `tutor`.`name`, `tutor`.`uidentifier`, `tutor`.`subject`, `tutor`.`level` FROM `assignment`, `tutor` WHERE `assignment`.`tid` = `tutor`.`id` AND `assignment`.`id` = ? LIMIT 1;", (id,))
        item = cur.fetchone()
        if item:
            teac = Tutor(id=item[4],
                         name=item[5],
                         uidentifier=item[6],
                         subject=item[7],
                         level=item[8])
            ass = Assignment(id=item[0],
                             name=item[1],
                             uidentifier=item[2],
                             type=item[3],
                             tutor=teac)
            cur.close()
            return ass
    
    def get_assignment_by_uid(self, uid):
        """Get an assignment by its unique identifier.

        This method executes a SQL query to select an assignment and its
        related tutor information from the database by its unique identifier.
        It then creates an Assignment object and a Tutor object for the row
        and returns them.

        Args:
            uid (str): The unique identifier of the assignment to get.

        Returns:
            An Assignment object with its associated Tutor object if found,
            or None otherwise.
         """
        cur = self.con.cursor()
        cur.execute("SELECT `assignment`.`id`, `assignment`.`name`, `assignment`.`uidentifier`, `assignment`.`type`, `assignment`.`tid`, `tutor`.`name`, `tutor`.`uidentifier`, `tutor`.`subject`, `tutor`.`level` FROM `assignment`, `tutor` WHERE `assignment`.`tid` = `tutor`.`id` AND `assignment`.`uidentifier` = ? LIMIT 1;", (uid,))
        item = cur.fetchone()
        if item:
            teac = Tutor(id=item[4],
                         name=item[5],
                         uidentifier=item[6],
                         subject=item[7],
                         level=item[8])
            ass = Assignment(id=item[0],
                             name=item[1],
                             uidentifier=item[2],
                             type=item[3],
                             tutor=teac)
            cur.close()
            return ass
    
    def search_assignment_by_name_instr(self, name):
        """Search assignments by their name using a partial match and sort them by id.

        This method executes a SQL query to select all assignments and their
        related tutor information from the database that have a partial match
        with the given name. It then creates Assignment objects and Tutor objects
        for each row and appends them to a list. The list is sorted by the id of
        the assignments in ascending order.

        Args:
            name (str): The name or part of the name of the assignments to search.

        Returns:
            A list of Assignment objects with their associated Tutor objects that match
            the search criteria and are sorted by id.
         """
        cur = self.con.cursor()
        cur.execute("SELECT `assignment`.`id`, `assignment`.`name`, `assignment`.`uidentifier`, `assignment`.`type`, `assignment`.`tid`, `tutor`.`name`, `tutor`.`uidentifier`, `tutor`.`subject`, `tutor`.`level` FROM `assignment`, `tutor` WHERE `assignment`.`tid` = `tutor`.`id` AND `assignment`.`name` LIKE ? ORDER BY `assignment`.`id` ASC;", ("%"+name+"%",))
        res = []
        for item in cur.fetchall():
            teac = Tutor(id=item[4],
                         name=item[5],
                         uidentifier=item[6],
                         subject=item[7],
                         level=item[8])
            ass = Assignment(id=item[0],
                             name=item[1],
                             uidentifier=item[2],
                             type=item[3],
                             tutor=teac)
            res.append(ass)
        cur.close()
        return res

    def search_uid_by_name_instr(self, name):
        """Search assignments by their unique identifier using a partial match and sort them by id.

        This method executes a SQL query to select all assignments and their
        related tutor information from the database that have a partial match
        with the given unique identifier. It then creates Assignment objects and Tutor objects
        for each row and appends them to a list. The list is sorted by the id of
        the assignments in ascending order.
        
        Args:
            name (str): The unique identifier or part of it of the assignments to search.

        Returns:
            A list of Assignment objects with their associated Tutor objects that match
            the search criteria and are sorted by id.
        """
        cur = self.con.cursor()
        cur.execute("SELECT `assignment`.`id`, `assignment`.`name`, `assignment`.`uidentifier`, `assignment`.`type`, `assignment`.`tid`, `tutor`.`name`, `tutor`.`uidentifier`, `tutor`.`subject`, `tutor`.`level` FROM `assignment`, `tutor` WHERE `assignment`.`tid` = `tutor`.`id` AND `assignment`.`uidentifier` LIKE ? ORDER BY `assignment`.`id` ASC;", ("%"+name+"%",))
        res = []
        for item in cur.fetchall():
            teac = Tutor(id=item[4],
                         name=item[5],
                         uidentifier=item[6],
                         subject=item[7],
                         level=item[8])
            ass = Assignment(id=item[0],
                             name=item[1],
                             uidentifier=item[2],
                             type=item[3],
                             tutor=teac)
            res.append(ass)
        cur.close()
        return res
    
    def search_assignment_by_tags(self, tags):
        """Search assignments by their tags using an exact match.

        This method is not implemented yet. It should execute a SQL query to select
        all assignments and their related tutor information from the database that have
        an exact match with the given tags. It then should create Assignment objects and Tutor objects
        for each row and append them to a list.

        Args:
            tags (list of str): The tags of the assignments to search.

        Returns:
            A list of Assignment objects with their associated Tutor objects that match
            the search criteria.
        """
        raise NotImplementedError
        
    def add_assignment(self, assignment):
        """Add a new assignment to the database.

         This method executes a SQL query to insert a new assignment and its
         related tutor information to the database. It then updates the id attribute
         of the Assignment object with the generated id from the database.

         Args:
             assignment (Assignment): The Assignment object to add to the database.

         Returns:
             None.
        """
        cur = self.con.cursor()
        cur.execute("INSERT INTO `assignment` (`name`, `uidentifier`, `type`, `tid`) VALUES (?, ?, ?, ?);", (assignment.name, assignment.uidentifier, assignment.type, assignment.tutor.id))
        self.con.commit()
        cur.execute("SELECT `id` FROM `assignment` WHERE `uidentifier`=? LIMIT 1;", (assignment.uidentifier,))
        assignment.id = cur.fetchone()[0]
        cur.close()
    
    def edit_assignment(self, assignment):
        """Edit an existing assignment in the database.

          This method executes a SQL query to update an existing assignment and its
          related tutor information in the database. It uses the id attribute of the 
            Assignment object as a condition for updating.

          Args:
              assignment (Assignment): The Assignment object with updated attributes
              to edit in the database.

          Returns:
              None.
        """
        cur = self.con.cursor()
        cur.execute("UPDATE `assignment` SET `name` = ?, `uidentifier` = ?, `type` = ?, `tid` = ? WHERE `id` = ?;", (assignment.name, assignment.uidentifier, assignment.type, assignment.tutor.id, assignment.id))
        self.con.commit()
        cur.close()

    def del_assignment(self, assignment):
        raise NotImplementedError

    def list_tutors(self):
        cur = self.con.cursor()
        cur.execute("SELECT `tutor`.`id`, `tutor`.`name`, `tutor`.`uidentifier`, `tutor`.`subject`, `tutor`.`level` FROM `tutor`;")
        res = []
        for item in cur.fetchall():
            teac = Tutor(id=item[0],
                         name=item[1],
                         uidentifier=item[2],
                         subject=item[3],
                         level=item[4])
            res.append(teac)
        cur.close()
        return res
        
    def get_tutor_by_uid(self, uid):
        cur = self.con.cursor()
        cur.execute("SELECT `id`, `name`, `uidentifier`, `subject`, `level` FROM `tutor` WHERE `uidentifier`=?;", (uid,))
        item = cur.fetchone()
        if item:
            teac = Tutor(id=item[0],
                         name=item[1],
                         uidentifier=item[2],
                         subject=item[3],
                         level=item[4])
        else:
            teac = None
        cur.close()
        return teac
        # raise NotImplementedError

    def add_tutor(self, tutor):
        cur = self.con.cursor()
        cur.execute("INSERT INTO `tutor` (`name`, `uidentifier`, `subject`, `level`) VALUES (?, ?, ?, ?);", (tutor.name, tutor.uidentifier, tutor.subject, tutor.level))
        self.con.commit()
        cur.execute("SELECT `id` FROM `tutor` WHERE `uidentifier`=? LIMIT 1;", (tutor.uidentifier,))
        tutor.id = cur.fetchone()[0]
        cur.close()

    def edit_tutor(self, tutor):
        raise NotImplementedError

    def delete_tutor(self, tutor):
        raise NotImplementedError

    def list_tags(self):
        cur = self.con.cursor()
        cur.execute("SELECT `tag`.`id`, `tag`.`text`, `tag`.`fgcolor`, `tag`.`bgcolor` FROM `tag`;")
        res = []
        for item in cur.fetchall():
            tag = Tag(id=item[0],
                      text=item[1],
                      fgcolor=item[2],
                      bgcolor=item[3])
            res.append(tag)
        cur.close()
        return res
        
    def search_tag_by_text_instr(self, text):
        cur = self.con.cursor()
        cur.execute("SELECT `tag`.`id`, `tag`.`text`, `tag`.`fgcolor`, `tag`.`bgcolor` FROM `tag` WHERE `tag`.`text` LIKE ?;", ("%"+text+"%",))
        res = []
        for item in cur.fetchall():
            tag = Tag(id=item[0],
                      text=item[1],
                      fgcolor=item[2],
                      bgcolor=item[3])
            res.append(tag)
        cur.close()
        return res
        
    def get_tag(self, text):
        cur = self.con.cursor()
        cur.execute("SELECT `tag`.`id`, `tag`.`text`, `tag`.`fgcolor`, `tag`.`bgcolor` FROM `tag` WHERE `tag`.`text` = ?;", (text,))
        item = cur.fetchone()
        if item:
            tag = Tag(id=item[0],
                      text=item[1],
                      fgcolor=item[2],
                      bgcolor=item[3])
        else:
            tag = None
        cur.close()
        return tag

    def add_tag(self, tag):
        cur = self.con.cursor()
        cur.execute("INSERT INTO `tag` (`text`, `fgcolor`, `bgcolor`) VALUES (?, ?, ?);", (tag.text, tag.fgcolor, tag.bgcolor))
        self.con.commit()
        cur.execute("SELECT `id` FROM `tag` WHERE `text`=? LIMIT 1;", (tag.text,))
        tag.id = cur.fetchone()[0]
        cur.close()

    def edit_tag(self, tag):
        cur = self.con.cursor()
        cur.execute("UPDATE `tag` SET `text` = ?, `fgcolor` = ?, `bgcolor` = ? WHERE `id` = ?;", (tag.text, tag.fgcolor, tag.bgcolor, tag.id))
        self.con.commit()
        cur.close()

    def delete_tag(self, tag):
        raise NotImplementedError

    def tag_assignment(self, assignment, tag):
        cur = self.con.cursor()
        cur.execute("INSERT INTO `assignment_tag` (`assignment_id`, `tag_id`) VALUES (?, ?);", (assignment.id, tag.id))
        self.con.commit()
        cur.close()

    def untag_assignment(self, assignment, tag):
        cur = self.con.cursor()
        cur.execute("DELETE FROM `assignment_tag` WHERE `assignment_id` = ? AND `tag_id` = ?;", (assignment.id, tag.id))
        self.con.commit()
        cur.close()
        
    def assignment_tags(self, assignment):
        cur = self.con.cursor()
        cur.execute("SELECT `tag`.`id`, `tag`.`text`, `tag`.`fgcolor`, `tag`.`bgcolor` FROM `assignment`, `assignment_tag`, `tag` WHERE `assignment`.`id` = `assignment_tag`.`assignment_id` AND `assignment_tag`.`tag_id` = `tag`.`id` AND `assignment`.`id` = ?;", (assignment.id,))
        res = []
        for item in cur.fetchall():
            tag = Tag(id=item[0],
                      text=item[1],
                      fgcolor=item[2],
                      bgcolor=item[3])
            res.append(tag)
        cur.close()
        return res
        
    def tagged_assignments(self, tag):
        cur = self.con.cursor()
        cur.execute("SELECT `assignment`.`id`, `assignment`.`name`, `assignment`.`uidentifier`, `assignment`.`type`, `assignment`.`tid`, `tutor`.`name`, `tutor`.`uidentifier`, `tutor`.`subject`, `tutor`.`level` FROM `assignment` JOIN `tutor` ON `assignment`.`tid` = `tutor`.`id` JOIN `assignment_tag` ON `assignment`.`id` = `assignment_tag`.`assignment_id` JOIN `tag` ON `assignment_tag`.`tag_id` = `tag`.`id` WHERE `tag`.`id` = ?;", (tag.id,))
        res = []
        for item in cur.fetchall():
            teac = Tutor(id=item[4],
                         name=item[5],
                         uidentifier=item[6],
                         subject=item[7],
                         level=item[8])
            ass = Assignment(id=item[0],
                             name=item[1],
                             uidentifier=item[2],
                             type=item[3],
                             tutor=teac)
            res.append(ass)
        cur.close()
        return res

    def sql_query(self):
        raise NotImplementedError
"""
SELECT `assignment`.`id`, `assignment`.`name`, `assignment`.`uidentifier`, `assignment`.`type`, `assignment`.`tid`, `tutor`.`name`, `tutor`.`uidentifier`, `tutor`.`subject`, `tutor`.`level`, `tag`.`text` FROM `assignment` JOIN `tutor` ON `assignment`.`tid` = `tutor`.`id` JOIN `assignment_tag` ON `assignment`.`id` = `assignment_tag`.`assignment_id` JOIN `tag` ON `assignment_tag`.`tag_id` = `tag`.`id`;
"""
